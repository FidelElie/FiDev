---
import { Image } from "astro:assets";
import { getCollection } from "astro:content";

import { SiSpotify } from 'solid-icons/si';

import { MusicPostMetadata } from "@/libraries/schemas";
import { generateSpotifyURI } from "@/libraries/utilities";

import { Container } from "@/components/core";
import { MusicPostRatingTag } from "@/components/interfaces";
import { RootLayout } from "@/pages/_root.layout";

export async function getStaticPaths() {
	const musicPosts = await getCollection("music");

	return musicPosts.map(entry => ({
		params: { music: entry.slug }, props: { entry }
	}))
}

const { entry } = Astro.props;

const { name, artists, covers, type, release, genres, duration, spotifyUrl } = entry.data;

const { Content } = await entry.render();

const populatedArtists = await getCollection("artists", (artist) => {
	return artists.some(artistEntry => artistEntry.spotifyId === artist.data.spotifyId);
});

const [firstArtist] = populatedArtists;
const [firstImageCover] = covers;

const favouriteTracks = type === MusicPostMetadata.types.ALBUM ? entry.data.tracks.filter(track => track.favourite) : [];
---
<RootLayout title={`${firstArtist.data.name} - ${name}`}>
	<Container class="flex flex-col py-10 gap-5 min-h-screen md:gap-10 md:flex-row">
		<aside class="flex-shrink-0 w-full h-min top-5 md:w-72 md:sticky">
			{
				firstImageCover && (
					<Image
						src={firstImageCover.url}
						alt={`${name} cover`}
						class="rounded-lg border border-slate-200 aspect-square mb-3"
						transition:name={entry.slug}
						inferSize
					/>
				)
			}
			<div class="flex flex-col items-end w-full">
				<ul class="text-right space-y-2 font-light w-full">
					<li><a href="/music" class="text-sm tracking-wide">Back to music</a></li>
					<li><hr class="w-full" /></li>
					<li>{type === MusicPostMetadata.types.ALBUM ? "LP" : "Single"}</li>
					<li>{release}</li>
					<li>{Math.ceil(duration / 1000 / 60)} mins</li>
					{ !!genres.length && <li>{genres.join(", ")}</li> }
				</ul>
			</div>
		</aside>
		<article class="flex-grow">
			<section class="mb-4">
				<a
					href={`/music/artists/${firstArtist.data.slug}`}
					aria-label={`${firstArtist.data.name} Artist Page`}
					class="text-xl font-extra flex items-center gap-1"
				>
					<div class="h-10 w-10 rounded-full border relative overflow-hidden">
						{
							firstArtist.data.covers.length && (
								<Image
									src={firstArtist.data.covers[0].url}
									alt={`${firstArtist.data.name} avatar`}
									inferSize
								/>
							)
						}
					</div>
					<h2 class="font-light">{firstArtist.data.name}</h2>
				</a>
				<h1 class="text-5xl font-heading tracking-tighter">{name}</h1>
				{
					type === MusicPostMetadata.types.ALBUM && (
						<p class="mt-2 text-blue-500">
							Favourite Songs: {
								favouriteTracks.length ? (
									favouriteTracks.length === entry.data.tracks.length ? (
										<>All of them</>
									) : (
										entry.data.tracks
											.filter(track => track.favourite)
											.map(favourite => favourite.name).join(", ")
									)
								) : (
									<>None</>
								)
							}
						</p>
					)
				}
				<div class="flex items-center justify-between mt-1.5">
					<MusicPostRatingTag rating={entry.data.rating}/>
					<div>
						<a href={generateSpotifyURI(spotifyUrl)} aria-label="Open with spotify">
							<SiSpotify class="text-xl text-green-600"/>
						</a>
					</div>
				</div>
			</section>
			<hr class="my-3 border-t border-slate-200"/>
			<div class="space-y-6 prose prose-blockquote:tracking-tight">
				<Content/>
			</div>
		</article>
	</Container>
</RootLayout>
