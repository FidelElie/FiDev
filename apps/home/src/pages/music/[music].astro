---
import { Image } from "astro:assets";
import { getCollection } from "astro:content";

import { Show } from "solid-js";

import { AppManifest } from "@/configs";

import { MusicPostMetadata } from "@/libraries/constants";

import { Container, Link } from "@/components/core";
import { MusicPostRatingTag } from "@/components/interfaces";
import { RootLayout } from "@/pages/_root.layout";
import { SpotifyLinkDropdown } from "@/components/pages/music/[music]/SpotifyLinkDropdown";

const totalMusicPosts = (await getCollection("music")).length;

export const getStaticPaths = async () => {
	const musicPosts = await getCollection("music");

	return musicPosts.map((entry) => ({
		params: { music: entry.slug },
		props: { entry },
	}));
};

const { entry } = Astro.props;

const { name, artists, covers, type, release, genres, duration } = entry.data;

const { Content } = await entry.render();

const populatedArtists = await getCollection("artists", (artist) => {
	return artists.some(
		(artistEntry) => artistEntry.spotifyId === artist.data.spotifyId,
	);
});

const [firstArtist] = populatedArtists;
const [firstImageCover] = covers;

const tracksList =
	type === MusicPostMetadata.types.ALBUM ? entry.data.tracks : [];

const favouriteTracks = tracksList.filter((track) => !!track.favourite);

const truncatedContent = entry.body.slice(0, 100);
---
<RootLayout
	title={`${firstArtist.data.name} - ${name}`}
	description={truncatedContent}
>
	<Container class="flex flex-col py-10 gap-5 min-h-screen md:gap-10 md:flex-row">
		<aside class="flex-shrink-0 w-full h-min top-5 md:w-72 md:sticky">
			{
				firstImageCover && (
					<Image
						src={firstImageCover.url}
						alt={`${name} cover`}
						class="rounded-lg border border-slate-200 aspect-square mb-3"
						transition:name={entry.slug}
						inferSize
					/>
				)
			}
			<div class="flex flex-col items-end w-full">
				<ul class="text-right space-y-2 font-light w-full">
					<li>
						<Link href="/music" class="text-sm tracking-wide">
							More ({totalMusicPosts - 1})
						</Link>
					</li>
					<li><hr class="w-full" /></li>
					<li>{type === MusicPostMetadata.types.ALBUM ? "LP" : "Single"}</li>
					<li>{release}</li>
					<li>{Math.ceil(duration / 1000 / 60)} mins</li>
					<Show when={type === MusicPostMetadata.types.ALBUM}>
						<details>
							<summary>Track list</summary>
							<hr class="border-slate-200 my-1.5"/>
							<ul class="space-y-0.5">
								{
									tracksList.map(
										(track, trackIndex) => (
											<li class="text-sm">
												{track.name} {track.favourite && <span>[F]</span>} <span class="text-blue-500 font-heading">.{trackIndex + 1}</span>
											</li>
										)
									)
								}
							</ul>
							<hr class="border-slate-200 my-1.5"/>
						</details>
					</Show>
					<Show when={genres.length}>
						<li>{genres.join(", ")}</li>
					</Show>
				</ul>
			</div>
		</aside>
		<article class="flex-grow">
			<section>
				<Link
					href={AppManifest.links.pages["/music/artists/:slug"](firstArtist.data.slug)}
					aria-label={`${firstArtist.data.name} Artist Page`}
					class="text-xl w-min flex items-center gap-1 group"
				>
					<div class="h-12 w-12 rounded-full border border-slate-200 relative">
						{
							firstArtist.data.covers.length && (
								<Image
									src={firstArtist.data.covers[0].url}
									alt={`${firstArtist.data.name} avatar`}
									class="rounded-full w-full h-full object-cover"
									inferSize
								/>
							)
						}
					</div>
					<h2 class="font-light whitespace-nowrap group-hover:text-blue-500">
						{firstArtist.data.name}
					</h2>
				</Link>
				<h1 class="text-5xl font-heading tracking-tighter">{name}</h1>
				<Show when={type === MusicPostMetadata.types.ALBUM}>
					<p class="mt-2 font-light">
						<span class="font-heading text-blue-500">Favourite Songs:</span> {
							favouriteTracks.length ? (
								favouriteTracks.length === tracksList.length ? (
									<>All of them</>
								) : (
									tracksList
										.filter(track => track.favourite)
										.map(favourite => favourite.name).join(", ")
								)
							) : (
								<>None</>
							)
						}
					</p>
				</Show>
				<div class="flex items-center justify-between mt-1.5">
					<MusicPostRatingTag rating={entry.data.rating}/>
					<div class="flex items-center">
						<SpotifyLinkDropdown post={entry.data} client:load/>
					</div>
				</div>
			</section>
			<hr class="border-slate-200 mt-2.5 mb-5"/>
			<div class="space-y-6 prose-lg prose-p:font-light prose-blockquote:tracking-tight">
				<Content/>
			</div>
		</article>
	</Container>
</RootLayout>
