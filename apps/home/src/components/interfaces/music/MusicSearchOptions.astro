---
import { twMerge } from "tailwind-merge";

import { AppManifest } from "@/configs";

import { Icon, Link, type ButtonProps } from "@/components/core";
import { MusicFeelingLuckyButton } from "@/components/interfaces/music/MusicFeelingLuckyButton";

const optionsMap = [
	{
		key: "posts",
		text: "post",
		icon: "note",
		href: AppManifest.links.pages["/music"],
	},
	{
		key: "artists",
		text: "artist",
		icon: "user",
		href: AppManifest.links.pages["/music/artists"],
	},
	{
		key: "genres",
		text: "genres",
		icon: "playlist",
		href: AppManifest.links.pages["/music/genres"],
	},
] as const;

export interface Props {
	class?: string;
	luckyIntent?: ButtonProps["intent"];
	options: ("posts" | "artists" | "genres")[];
}

const { class: _class, luckyIntent = "secondary", options } = Astro.props;

const mappedOptions = optionsMap.filter((option) =>
	options.includes(option.key),
);
---

<div class={twMerge("flex flex-col w-full gap-2 sm:flex-row sm:w-auto", _class)}>
	<div class="flex flex-col items-center pt-1 border border-slate-200 rounded-lg px-2 sm:flex-row sm:pt-0">
		<p class="font-heading whitespace-nowrap">
			Search by:
		</p>
		<div class="flex items-center">
			{
				mappedOptions.map(
					(option, optionIndex, mappingOptions) => (
						<>
							<Link.Button
								href={option.href}
								intent="secondary"
								class="flex items-center gap-2 border-none"
							>
								<Icon name={option.icon} class="text-xl text-blue-500"/>
								{option.text}
							</Link.Button>
							{ mappingOptions.length - 1 !== optionIndex && <div class="w-px h-5 bg-slate-200"/> }
						</>
					)
				)
			}
		</div>
	</div>
	<MusicFeelingLuckyButton
		intent={luckyIntent}
		class="w-full justify-center sm:w-auto sm:justify-start"
		client:load
	/>
</div>
